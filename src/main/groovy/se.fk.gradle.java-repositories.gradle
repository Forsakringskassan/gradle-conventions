import org.gradle.api.model.ObjectFactory
import groovy.json.JsonSlurper
import groovy.json.JsonOutput

class JavaRepositoriesExtension {
	JavaRepositoriesExtension(ObjectFactory objects) {}
}

project.extensions.create('javaRepositoriesExtension', JavaRepositoriesExtension, project.objects)

project.plugins.apply 'java-library'

repositories {
	mavenLocal()
	mavenCentral()
	gradlePluginPortal()
}

def githubOrg = "Forsakringskassan"
def maxAgeMinutes = System.getenv("GRADLE_CONVENTIONS_MAX_AGE_MINUTES") ?: "1"
def cacheFile = new File(gradle.gradleUserHomeDir, "${githubOrg}-github-packages.json")
def token = System.getenv("GITHUB_TOKEN")
if (!token) {
	throw new GradleException("GITHUB_TOKEN not set. Cannot fetch GitHub Packages.")
}

def allRepos = []
def maxAgeMillis = maxAgeMinutes.toInteger() * 60 * 1000

// Use cache if valid
if (cacheFile.exists() && System.currentTimeMillis() - cacheFile.lastModified() < maxAgeMillis) {
	logger.lifecycle("Using cached GitHub repos from ${cacheFile}, max age ${maxAgeMinutes} minutes.")
	allRepos = new JsonSlurper().parse(cacheFile)
} else {
	logger.lifecycle("Fetching GitHub Packages for organization '${githubOrg}'.")

	def perPage = 100
	def page = 1
	def reposSet = new LinkedHashSet()

	while (true) {
		def apiUrl = "https://api.github.com/orgs/${githubOrg}/packages?package_type=maven&per_page=${perPage}&page=${page}"
		logger.lifecycle("Fetching: ${apiUrl}")
		def connection = new URL(apiUrl).openConnection()
		connection.setRequestProperty("Authorization", "token ${token}")
		connection.setRequestProperty("Accept", "application/vnd.github+json")

		def packagesJson = new JsonSlurper().parse(connection.getInputStream())
		if (!packagesJson || packagesJson.isEmpty()) break

			packagesJson.each { pkg ->
				if (pkg.repository?.name) {
					reposSet << pkg.repository.name
				}
			}
		page++
	}

	allRepos = reposSet as List
	cacheFile.text = JsonOutput.toJson(allRepos)
}

logger.lifecycle("Adding GitHub Packages repositories for '${githubOrg}': ${allRepos.join(", ")}")
allRepos.each { repoName ->
	repositories {
		maven {
			url = uri("https://maven.pkg.github.com/${githubOrg}/${repoName}")
			credentials {
				username = System.getenv("GITHUB_ACTOR")
				password = token
			}
		}
	}
}
