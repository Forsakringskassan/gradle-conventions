interface FKAsyncApiPluginExtension {
}

def extension = project.extensions.create("fkAsyncApi", FKAsyncApiPluginExtension)

def generatedDir = "src/generated-source/java"

tasks.register('generateJarApi') {
	def outputDir = "${project.rootDir}/${generatedDir}/" + project.group.replaceAll("\\.", "/")
	def generateCommand = "npx @asyncapi/cli@3.5.2 generate models java ${project.rootDir}/asyncapi.yaml --packageName=${project.group} -o ${outputDir} --javaJackson"
	if (isWindows()) {
		generateCommand = "cmd /c " + generateCommand
	}
	doLast {
		logger.lifecycle("Running generate command:\n  ${generateCommand}")
		def generateCommandResult = new ProcessBuilder(generateCommand.split(" "))
				.directory(project.projectDir)
				.inheritIO()
				.start()
				.waitFor()

		logger.lifecycle("Generate command exit code: ${generateCommandResult}")
	}
}

tasks.register("copySpec") {
	def tempDir = layout.buildDirectory.dir("asyncapi-temp")
	outputs.dir(tempDir)
	doLast {
		tempDir.get().asFile.mkdirs()

		def asyncApiFile = file("$rootDir/asyncapi.yaml")
		def asyncApiYaml = new org.yaml.snakeyaml.Yaml().load(asyncApiFile.text)

		asyncApiYaml.info.version = project.version

		def outputFile = new File(tempDir.get().asFile, "asyncapi.yaml")
		outputFile.text = new org.yaml.snakeyaml.Yaml().dump(asyncApiYaml)

		logger.lifecycle("Updated asyncapi.yaml version to: ${project.version}")
	}
}

generateJarApi.dependsOn tasks.copySpec
compileJava.dependsOn tasks.generateJarApi
tasks.named("prepareJavacCodegenFolder").configure {
	generateJarApi.mustRunAfter it
}


tasks.named('processResources') {
	dependsOn tasks.copySpec
	from(layout.buildDirectory.dir("asyncapi-temp")) {
		include "asyncapi.yaml"
	}
}

dependencies {
	implementation 'com.fasterxml.jackson.core:jackson-annotations:2.19.0'
	implementation 'com.fasterxml.jackson.core:jackson-core:2.19.0'
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.19.0'
}

def shouldGitIgnore(content) {
	def gitIgnoreFile = file("$rootDir/.gitignore")
	if (!gitIgnoreFile.exists()) {
		throw new RuntimeException("There should be a .gitignore in the root of the repo.")
	}
	def gitIgnoreContent = gitIgnoreFile.text
	if (!gitIgnoreContent.contains(content)) {
		throw new RuntimeException(content + " should be included in .gitignore.")
	}
}

def isWindows() {
	return System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')
}
