import org.gradle.api.provider.Property
import org.gradle.api.provider.ListProperty
import org.gradle.api.provider.MapProperty

interface FKAsyncApiPluginExtension {
}

def extension = project.extensions.create("fkAsyncApi", FKAsyncApiPluginExtension)


def generatedDir = "src/generated/java"
shouldGitIgnore(generatedDir)
task prepareGeneratedFolder {
	doLast {
		if (file(generatedDir).exists()) {
			delete generatedDir
		}
		file(generatedDir).mkdirs()
	}
}

tasks.register('generateJarApi') {
	def outputDir = "${project.rootDir}/${generatedDir}/" + project.group.replaceAll("\\.", "/")
	def generateCommand = "npx @asyncapi/cli@3.5.2 generate models java ${project.rootDir}/asyncapi.yaml --packageName=${project.group} -o ${outputDir} --javaJackson"
	doLast {
		logger.lifecycle("Running generate command:\n  ${generateCommand}")
		def generateCommandResult = new ProcessBuilder(generateCommand.split(" "))
				.directory(project.projectDir)
				.inheritIO()
				.start()
				.waitFor()

		logger.lifecycle("Generate command exit code: ${generateCommandResult}")
	}
}

tasks.register("copySpec") {
	def resourcesDir = layout.buildDirectory.dir("resources/main")
	doLast {
		resourcesDir.get().asFile.mkdirs()

		def asyncApiFile = file("$rootDir/asyncapi.yaml")
		def asyncApiYaml = new org.yaml.snakeyaml.Yaml().load(asyncApiFile.text)

		asyncApiYaml.info.version = project.version

		def outputFile = new File(resourcesDir.get().asFile, "asyncapi.yaml")
		outputFile.text = new org.yaml.snakeyaml.Yaml().dump(asyncApiYaml)

		logger.lifecycle("Updated asyncapi.yaml version to: ${project.version}")
	}
}

copySpec.dependsOn tasks.prepareGeneratedFolder
generateJarApi.dependsOn tasks.copySpec
compileJava.dependsOn tasks.generateJarApi

dependencies {
	implementation 'com.fasterxml.jackson.core:jackson-annotations:2.19.0'
	implementation 'com.fasterxml.jackson.core:jackson-core:2.19.0'
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.19.0'
}

def shouldGitIgnore(content) {
	def gitIgnoreFile = file("$rootDir/.gitignore")
	if (!gitIgnoreFile.exists()) {
		throw new RuntimeException("There should be a .gitignore in the root of the repo.")
	}
	def gitIgnoreContent = gitIgnoreFile.text
	if (!gitIgnoreContent.contains(content)) {
		throw new RuntimeException(content + " should be included in .gitignore.")
	}
}