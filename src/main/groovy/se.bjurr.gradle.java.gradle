import org.gradle.api.model.ObjectFactory
import org.gradle.api.provider.Property

class JavaExtension {
	final ListProperty<String> generatedSourceFolders
	final ListProperty<String> extraTestSourceFolders

	JavaExtension(ObjectFactory objects) {
		generatedSourceFolders = objects.listProperty(String)
		extraTestSourceFolders = objects.listProperty(String)

		// Set defaults
		generatedSourceFolders.convention([
			"generatedSourceFolders",
			"src/gen/java,src/generated/java"
		])
		extraTestSourceFolders.convention([
			"extraTestSourceFolders",
			"src/test/generated"
		])
	}
}

project.extensions.create('javaExtension', JavaExtension, project.objects)


project.plugins.apply 'java-library'
project.plugins.apply 'eclipse'
project.plugins.apply 'groovy'

repositories {
	mavenLocal()
	mavenCentral()
}

plugins.withType(JavaPlugin) {
	tasks.withType(JavaCompile).configureEach {
		sourceCompatibility = JavaVersion.VERSION_11
		targetCompatibility = JavaVersion.VERSION_11
	}

	project.extensions.javaExtension.generatedSourceFolders
			.map {
				it.collect { folder ->
					project.layout.projectDirectory.dir(folder)
				}
			}
			.get()
			.each { dir ->
				if (dir.asFile.exists()) {
					sourceSets.named("main") {
						java.srcDir(dir)
					}
				}
			}

	project.extensions.javaExtension.extraTestSourceFolders
			.map {
				it.collect { folder ->
					project.layout.projectDirectory.dir(folder)
				}
			}
			.get()
			.each { dir ->
				if (dir.asFile.exists()) {
					sourceSets.named("test") {
						java.srcDir(dir)
					}
				}
			}
}

test {
	if (System.getProperty('DEBUG', 'false') == 'true') {
		jvmArgs '-Xdebug',
				'-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=9009',
				'-parameters'
	}
}

eclipse {
	classpath {
		downloadSources = true
		downloadJavadoc = true
	}
}

tasks.withType(JavaCompile) {
	options.compilerArgs << "-Xlint:-deprecation"
	options.compilerArgs << "-Xlint:-processing"
	options.compilerArgs << "-Xdoclint:none"
	options.warnings = false
	options.compilerArgs << "-parameters"
	options.encoding = "UTF-8"
}

allprojects {
	tasks.withType(Javadoc) {
		options.addStringOption('Xdoclint:none', '-quiet')
	}
}

jar {
	manifest {
		attributes 'name': project.name
		attributes 'Automatic-Module-Name': project.group + "." + project.name
	}
}