import org.gradle.api.model.ObjectFactory
import org.gradle.api.provider.Property
import org.gradle.api.provider.ListProperty

class ReleaseExtension {
	final Property<String> ignoreCommitsIfMessageMatches
	/**
	 * If not prepending, it will rewrite the entire changelog
	 */
	final Property<Boolean> prependChangelogToFile
	final Property<Boolean> updateChangelog
	final Property<String> mavenRepositoryUrl
	final ListProperty<String> releasePostTasks

	ReleaseExtension(ObjectFactory objects) {
		ignoreCommitsIfMessageMatches = objects.property(String)
		prependChangelogToFile = objects.property(Boolean)
		updateChangelog = objects.property(Boolean)
		mavenRepositoryUrl = objects.property(String)
		releasePostTasks = objects.listProperty(String)

		// Set defaults
		ignoreCommitsIfMessageMatches.convention("^\\[maven-release-plugin\\].*|^\\[Gradle Release Plugin\\].*|^Merge.*|.*\\[GRADLE SCRIPT\\].*")
		prependChangelogToFile.convention(true)
		updateChangelog.convention(true)
		mavenRepositoryUrl.convention("https://ossrh-staging-api.central.sonatype.com/service/local/")
	}
}

project.extensions.create('releaseExtension', ReleaseExtension, project.objects)
project.plugins.apply "se.bjurr.gitchangelog.git-changelog-gradle-plugin"

gitChangelogSemanticVersion {
	suffixSnapshotIfNotTagged.set(false)
	patchVersionPattern.set("[Ff]ix|[Cc]hore\\(deps\\)")
}

gitChangelog {
	ignoreCommitsIfMessageMatches = project.extensions.releaseExtension.ignoreCommitsIfMessageMatches
	prependToFile = project.extensions.releaseExtension.prependChangelogToFile
}

/**
 * Release process
 */
tasks.register('updateVersion', GradleBuild) {
	tasks = [
		'gitChangelogSemanticVersion',
		'commitNewVersionTask',
	]
}

tasks.register('release', GradleBuild) {
	tasks = ['clean']

	doFirst {
		tasks += ['publishToMavenLocal']

		if (project.extensions.releaseExtension.updateChangelog.get()) {
			tasks += [
				'gitChangelog',
				'commitChangelogTask'
			]
		}

		tasks += project.extensions.releaseExtension.releasePostTasks.get()
	}
}

/**
 * Supporting methods
 */
def shouldGitIgnore(filename) {
	if (!file('.gitignore').text.contains(filename)) {
		throw new RuntimeException("The .gitignore should include '${filename}'")
	}
	logger.lifecycle("${filename} is ignored")
}

def runCommand(args, int attempts = 5) {
	logger.lifecycle("Executing ${args.join(' ')}")
	def stdout = new ByteArrayOutputStream()
	try {
		exec {
			commandLine args
			standardOutput = stdout
		}
		return stdout.toString().trim()
	} catch (e) {
		def err = stdout.toString().trim() + "\n" + "Command: ${args.join(' ')} failed with ${e.getMessage()}" + "\n" + "Trying ${attempts} more times"
		logger.lifecycle(err)
		if (attempts == 0) {
			throw new RuntimeException(err, e)
		}
		sleep(5 * 1000)
		return runCommand(args, attempts - 1)
	}
}

task commitNewVersionTask() {
	doLast {
		try {
			runCommand([
				'git',
				'commit',
				'-a',
				'-m',
				"chore(release): ${version} [GRADLE SCRIPT]"
			])
			runCommand(['git', 'push'])
		} catch (e) {
			logger.error("Unable commit/push new version, skipping that.",e.getMessage())
		}

		try {
			runCommand(['git', 'tag', "${version}"])
			runCommand([
				'git',
				'push',
				'origin',
				"${version}"
			])
			runCommand(['git', 'push', '--tags'])
		} catch (e) {
			logger.error("Unable tag new version, skipping that.",e.getMessage())
		}
	}
}

task commitChangelogTask() {
	doLast {
		try {
			runCommand([
				'git',
				'commit',
				'-a',
				'-m',
				"chore(release): Updating changelog with ${version} [GRADLE SCRIPT]"
			])
			runCommand(['git', 'push'])
		} catch (e) {
			logger.error("Unable commit/push changelog, skipping that.",e.getMessage())
		}
	}
}